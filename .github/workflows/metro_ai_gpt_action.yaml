name: Metro AI GPT Action

# AI-Driven RPG Automation Workflow
# This workflow demonstrates GitHub API integration for AI agents working with the Metro AI RPG repository
# 
# For AI Integration:
# - OpenAPI specification available at: /system/metro_ai_github_openapi.yaml
# - Authentication: Use GPT_GITHUB_API_TOKEN secret for GitHub API access
# - Target endpoints: GitHub REST API for reading/writing repository files
# - Primary use case: AI agents managing RPG game state and content
#
# For Developers:
# - This workflow showcases automated file management via GitHub API
# - Demonstrates secure token usage and API interactions
# - Provides examples for integrating AI systems with GitHub repositories

# Workflow triggers
on:
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Type of action to perform'
        required: false
        default: 'api_access_test'
        type: choice
        options:
          - api_access_test
          - readme_update
          - file_management
  push:
    branches:
      - main
    paths:
      - '**.md'
      - '**.json'
      - '.github/workflows/metro_ai_gpt_action.yaml'

# GitHub API permissions matching GPT GitHub API token requirements
# These permissions align with the OpenAPI specification in /system/metro_ai_github_openapi.yaml
# Required for AI agents to read/write repository content and manage workflow automation
permissions:
  actions: write
  contents: write
  issues: write
  metadata: read
  pages: write
  pull-requests: write
  statuses: read
  workflows: write

# Environment variables for AI-driven RPG automation
# GITHUB_API_BASE: Base URL for GitHub REST API (matches OpenAPI spec)
# REPO_OWNER/REPO_NAME: Dynamic repository identification for flexible AI integration
env:
  REPO_OWNER: ${{ github.repository_owner }}
  REPO_NAME: ${{ github.event.repository.name }}
  GITHUB_API_BASE: https://api.github.com

jobs:
  metro_ai_gpt_operations:
    name: Metro AI GPT Operations
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 2: List repository files (includes OpenAPI specification location)
      - name: List Repository Files
        id: list_files
        run: |
          echo "=== Repository File Structure ===" 
          find . -type f -name "*.json" -o -name "*.md" -o -name "*.yaml" -o -name "*.yml" | \
            grep -v "/.git/" | sort
          echo ""
          echo "=== Root Directory Contents ==="
          ls -la
          echo ""
          echo "=== System Directory Contents (includes OpenAPI spec) ==="
          ls -la system/ 2>/dev/null || echo "System directory not found"
          echo ""
          echo "=== OpenAPI Specification Check ==="
          if [ -f "system/metro_ai_github_openapi.yaml" ]; then
            echo "‚úÖ OpenAPI specification found at: system/metro_ai_github_openapi.yaml"
          else
            echo "‚ùå OpenAPI specification not found"
          fi
      
      # Step 3: Read README.md via GitHub API (demonstrates AI integration pattern)
      - name: Read README via GitHub API
        id: read_readme_api
        run: |
          echo "=== Reading README.md via GitHub API ==="
          echo "This demonstrates the same API pattern defined in /system/metro_ai_github_openapi.yaml"
          README_RESPONSE=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ env.GITHUB_API_BASE }}/repos/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}/contents/README.md")
          
          # Extract content and decode from base64
          README_CONTENT=$(echo "$README_RESPONSE" | jq -r '.content' | base64 -d)
          README_SHA=$(echo "$README_RESPONSE" | jq -r '.sha')
          
          # Store in environment for next step
          echo "README_SHA=$README_SHA" >> $GITHUB_ENV
          
          # Display first few lines
          echo "=== README.md Content Preview (first 10 lines) ==="
          echo "$README_CONTENT" | head -10
          
          # Store content for next step
          echo "$README_CONTENT" > /tmp/current_readme.md
      
      # Step 4: Setup Python environment
      - name: Setup Python Environment
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      # Step 5: Install Python dependencies
      - name: Install Python Dependencies
        id: install_deps
        run: |
          pip install requests base64-python
      
      # Step 6: Edit README.md via Python using GITHUB_TOKEN (AI automation example)
      - name: Edit README via Python GitHub API
        id: edit_readme_python
        run: |
          echo "=== AI-Driven Content Management Example ==="
          echo "This step demonstrates automated file updates using GitHub API"
          echo "Following the patterns defined in /system/metro_ai_github_openapi.yaml"
          python3 << 'EOF'
          import os
          import requests
          import base64
          import json
          from datetime import datetime
          
          # Configuration - demonstrates secure token usage for AI agents
          github_token = os.environ['GITHUB_TOKEN']  # Use GPT_GITHUB_API_TOKEN in production AI setups
          repo_owner = os.environ['REPO_OWNER']
          repo_name = os.environ['REPO_NAME']
          readme_sha = os.environ['README_SHA']
          
          # Read current README content
          with open('/tmp/current_readme.md', 'r') as f:
              current_content = f.read()
          
          # Add workflow execution timestamp
          timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
          workflow_note = f"\n\n<!-- Last workflow execution: {timestamp} -->"
          
          # Check if workflow note already exists and update or append
          if "<!-- Last workflow execution:" in current_content:
              import re
              updated_content = re.sub(
                  r'<!-- Last workflow execution:.*?-->',
                  f'<!-- Last workflow execution: {timestamp} -->',
                  current_content
              )
          else:
              updated_content = current_content + workflow_note
          
          # Prepare API request
          headers = {
              'Authorization': f'Bearer {github_token}',
              'Accept': 'application/vnd.github.v3+json',
              'Content-Type': 'application/json'
          }
          
          # Encode content to base64
          encoded_content = base64.b64encode(updated_content.encode('utf-8')).decode('utf-8')
          
          # Prepare update payload
          payload = {
              'message': f'Auto-update README.md via Metro AI GPT Action - {timestamp}',
              'content': encoded_content,
              'sha': readme_sha
          }
          
          # Make API request to update README
          api_url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/contents/README.md'
          
          print(f"=== Updating README.md via GitHub API ===")
          print(f"API URL: {api_url}")
          print(f"Content length: {len(updated_content)} characters")
          
          response = requests.put(api_url, headers=headers, data=json.dumps(payload))
          
          if response.status_code == 200:
              print("‚úÖ README.md successfully updated!")
              result = response.json()
              print(f"New SHA: {result['content']['sha']}")
              print(f"Commit URL: {result['commit']['html_url']}")
          else:
              print(f"‚ùå Failed to update README.md")
              print(f"Status code: {response.status_code}")
              print(f"Response: {response.text}")
              exit(1)
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 7: Verify changes
      - name: Verify README Changes
        id: verify_changes
        run: |
          echo "=== Verifying README.md Changes ==="
          
          # Read updated README via API
          UPDATED_README=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ env.GITHUB_API_BASE }}/repos/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}/contents/README.md")
          
          UPDATED_CONTENT=$(echo "$UPDATED_README" | jq -r '.content' | base64 -d)
          
          # Check for workflow timestamp
          if echo "$UPDATED_CONTENT" | grep -q "Last workflow execution:"; then
              echo "‚úÖ Workflow timestamp found in README.md"
              echo "Last few lines of updated README:"
              echo "$UPDATED_CONTENT" | tail -5
          else
              echo "‚ùå Workflow timestamp not found in README.md"
              exit 1
          fi
      
      # Step 8: Output summary
      - name: Operation Summary
        id: summary
        run: |
          echo "=== Metro AI GPT Action Summary ==="
          echo "‚úÖ Repository checkout completed"
          echo "‚úÖ File listing completed (OpenAPI spec verified)"
          echo "‚úÖ README.md read via GitHub API (following OpenAPI patterns)"
          echo "‚úÖ README.md updated via Python GitHub API"
          echo "‚úÖ Changes verified"
          echo ""
          echo "ü§ñ AI Integration Ready!"
          echo "üìÑ OpenAPI Spec: /system/metro_ai_github_openapi.yaml"
          echo "üîë Token Usage: GPT_GITHUB_API_TOKEN for AI agents"
          echo "üéÆ Repository: ${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}"
          echo "‚è∞ Execution time: $(date)"